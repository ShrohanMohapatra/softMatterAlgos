load "msh3"
load "medit"
int nn=4;
real nu=1./(10^6);
real Reynolds;
cout << "Enter the Reynolds number -> ";
cin >> Reynolds;
real Um = Reynolds*nu/1;
real dt=1.0/nn/Um;
cout << "Umax = "<< Um << " Time step = "<< dt;
real alpha=1./dt, alpha2=sqrt(alpha);

real D = 0.20;
real H = 0.6;
real cx0 = 1.1;
real cy0 = 0.30; //center of cylinder
real theta = -0.25; // angle of orientation in radians
// 2D mesh
border fr1(t=0, 2.2){x=t; y=0; label=1;}
border fr2(t=0, H){x=2.2; y=t; label=1;}
border fr3(t=2.2, 0){x=t; y=H; label=1;}
border fr4(t=H, 0){x=0; y=t; label=2;}
border fr5(t=0, 2*pi){
  x=cx0+D*cos(t)*cos(theta)+0.7*D*sin(t)*sin(t/2)^2.5*sin(theta); 
  y=cy0+D*cos(t)*sin(theta)-0.7*D*sin(t)*sin(t/2)^2.5*cos(theta); label=3;}
mesh Th2 = buildmesh(fr1(5*nn) + fr2(nn) + fr3(5*nn) + fr4(nn) + fr5(-nn));
 
// 3D mesh
int[int] rup = [0, 2], rlow = [0, 1];
int[int] rmid = [1, 1, 2, 1, 3, 1, 4, 1];
real zmin = 0.0;
real zmax = 1.0;

mesh3 Th = buildlayers(Th2, nn,
    coef=max((zmax-zmin)/zmax, 1./nn),
    zbound=[zmin,zmax],
    labelmid=rmid,
    labelup=rup,
    labeldown=rlow);

medit("Th", Th);

fespace VVh(Th,[P23d,P23d,P23d,P13d]);
fespace Vh(Th,P23d);
fespace Ph(Th,P13d);
Ph t1,t2,t3,t4,t5,t6,t7,t8,t9; // Vorticity
macro Grad(u) [dx(u),dy(u),dz(u)]// EOM
macro div(u1,u2,u3) (dx(u1)+dy(u2)+dz(u3)) //EOM
  
  varf vStokes([u1,u2,u3,p],[v1,v2,v3,q]) = 
  int3d(Th,qforder=3)( Grad(u1)'*Grad(v1) +  Grad(u2)'*Grad(v2) +  Grad(u3)'*Grad(v3)
             - div(u1,u2,u3)*q - div(v1,v2,v3)*p + 1e-10*q*p ) 
 +  on(2,u1=Um,u2=0,u3= 0)
 +  on(3,u1=0,u2=0,u3=0)
 ;

cout << "b  mat " << endl;

matrix A=vStokes(VVh,VVh);
cout << "e  mat " << endl;
set(A,solver=UMFPACK);
cout << "e fac  mat " << endl;
real[int] b= vStokes(0,VVh);

VVh [u1,u2,u3,p];
VVh [X1,X2,X3,Xp];
VVh [x1,x2,x3,xp]=[x,y,z,0];

u1[]= A^-1 * b;
macro XX1() (x-u1*dt)//
macro XX2() (y-u2*dt)//
macro XX3() (z-u3*dt)//

  varf vNS([uu1,uu2,uu3,p],[v1,v2,v3,q]) = 
  int3d(Th)( alpha*(uu1*v1+uu2*v2+uu3*v3) + nu*(Grad(uu1)'*Grad(v1) +  Grad(uu2)'*Grad(v2) +  Grad(uu3)'*Grad(v3))
  - div(uu1,uu2,uu3)*q - div(v1,v2,v3)*p + 100*q*p ) 
  + on(2,uu1=-Um,uu2=0,uu3=0)
  + on(1,uu1=0,uu2=0,uu3=0)
   //+  int3d(Th,optimize=1)(   alpha*(  u1(X1,X2,X3)*v1  +  u2(X1,X2,X3)*v2  +  u3(X1,X2,X3)*v3 )  ) ;
  +  int3d(Th,optimize=1)(   alpha*(  u1(XX1,XX2,XX3)*v1  +  u2(XX1,XX2,XX3)*v2  +  u3(XX1,XX2,XX3)*v3 )  ) ;
//+  int3d(Th,optimize=1)(   alpha*(  u1(x,y,z)*v1  +  u2(x,y,z)*v2  +  u3(x,y,z)*v3 )  ) ;
//+  int3d(Th,optimize=1)(   alpha*(  u1*v1  +  u2*v2  +  u3*v3 )  ) ;

cout << " build  A" << endl;
A = vNS(VVh,VVh);
cout << " fac A" << endl;
set(A,solver=UMFPACK);
real t=0;
for(int i=0;i<20;++i)
  {
    t += dt;
    cout << " iteration " << i << " t = " << t << endl;
    X1[]=x1[]+u1[]*(-dt);
    //    verbosity=200;
    b=vNS(0,VVh);
    verbosity=2;
    u1[]= A^-1 * b;
    t1 = dx(u1);
    t2 = dy(u1);
    t3 = dz(u1);
    t4 = dx(u3);
    t5 = dy(u3);
    t6 = dz(u3);
    t7 = u1*t1+u2*t2+u3*t3;
    t8 = u1*t4+u2*t5+u3*t6;
    t9 = (dz(t7)-dx(t8))/(t3-t4);
    plot(t9,cmm="Iteration "+i+", Time = "+t+" sec, Re = "+Reynolds,fill=true,wait=0,nbiso=40);
  }
plot(t9,cmm="Time = "+t+" sec, Re = "+Reynolds,fill=true,wait=1,nbiso=40);