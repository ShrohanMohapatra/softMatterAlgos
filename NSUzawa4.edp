// Parameters
verbosity = 0;
real D = 0.2;
real H = 0.5;
real cx0 = 0.3;
real cy0 = 0.25; //center of cylinder
real xa = 0.15;
real ya = 0.2; 
real xe = 0.25; 
real ye = 0.2; 
int nn = 15; //TODO
real reynoldsnum;
cout << "Reynolds number -> ";
cin >> reynoldsnum;
real Um = reynoldsnum*1e-6/D; //max velocity (driven by Reynold's number)
real nu = 1e-6;
func U1 = 4.*Um*y*(H-y)/(H*H); //Boundary condition
func U2 = 0.;
real dt = D/Um;
real T=50*dt;
real epspq = 1e-10;
real eps = 1e-6;
// Variables
func Ub = Um*2./3.; 
real alpha = 1/dt;
real Rey = Ub*D/nu; 
real t = 0.;
// Mesh
border fr1(t=0, 2.2){x=t; y=0; label=1;}
border fr2(t=0, H){x=2.2; y=t; label=2;}
border fr3(t=2.2, 0){x=t; y=H; label=1;}
border fr4(t=H, 0){x=0; y=t; label=1;}
border fr5(t=2*pi, 0){x=cx0+D*sin(t)/2; y=cy0+D*cos(t)/2; label=3;}
mesh Th = buildmesh(fr1(5*nn) + fr2(nn) + fr3(5*nn) + fr4(nn) + fr5(-nn*3));
// Fespace
fespace Mh(Th, [P1]); 
Mh p;
fespace Xh(Th, [P2]); 
Xh u1, u2;
fespace Wh(Th, [P1dc]); 
// Contributing terms
Wh uvw1;
Wh uvw2;
Wh uvw3;
Wh uvw4;
Wh uvw5;
Wh uvw6;
Wh uvw7;
Wh uvw8;
Wh uvw9;
Wh larvt; // Indicator
// Macro
macro grad(u) [dx(u), dy(u)] //
macro div(u1, u2) (dx(u1) + dy(u2)) //
// Problem
varf von1 ([u1, u2, p], [v1, v2, q]) 
	= on(3, u1=0, u2=0) 
	+ on(1, u1=U1, u2=U2);
//remark : the value 100 in next varf is manualy fitted, because free outlet.
varf vA (p, q) = int2d(Th)(
grad(p)' * grad(q)
    )
    + int1d(Th, 2)(
100*p*q )
;
varf vM (p, q) = int2d(Th, qft=qf2pT)(p*q)
    + on(2, p=0)
    ;
varf vu ([u1], [v1]) = int2d(Th)(
alpha*(u1*v1)
+ nu*(grad(u1)' * grad(v1))
    )
    + on(1, 3, u1=0)
    ;
varf vu1 ([p], [v1]) = int2d(Th)(p*dx(v1)); 
varf vu2 ([p], [v1]) = int2d(Th)(p*dy(v1));
varf vonu1 ([u1], [v1]) = on(1, u1=U1) + on(3, u1=0); 
varf vonu2 ([u1], [v1]) = on(1, u1=U2) + on(3, u1=0);
matrix pAM = vM(Mh, Mh, solver=UMFPACK); 
matrix pAA = vA(Mh, Mh, solver=UMFPACK); 
matrix AU = vu(Xh, Xh, solver=UMFPACK); matrix B1 = vu1(Mh, Xh);
matrix B2 = vu2(Mh, Xh); 
real[int] brhs1 = vonu1(0, Xh);
real[int] brhs2 = vonu2(0, Xh);
varf vrhs1(uu, vv) = int2d(Th)(convect([u1, u2], -dt, u1)*vv*alpha) + vonu1;
varf vrhs2(v2, v1) = int2d(Th)(convect([u1, u2], -dt, u2)*v1*alpha) + vonu2;
// Uzawa function
func real[int] JUzawa (real[int] & pp){ 
	real[int] b1 = brhs1; 
	b1 += B1*pp; 
	real[int] b2 = brhs2; 
	b2 += B2*pp; 
	u1[] = AU^-1 * b1;
	u2[] = AU^-1 * b2; pp = B1'*u1[];
	pp += B2'*u2[];
	pp = -pp;
	return pp; }
// Preconditioner function
func real[int] Precon (real[int] & p){ 
	real[int] pa = pAA^-1*p;
	real[int] pm = pAM^-1*p;
	real[int] pp = alpha*pa + nu*pm; return pp;
	}
// Initialization
p = 0;
// Time loop
int ndt = T/dt;
ofstream file ("flowPastCylinder.csv",append);
file<<endl<<"Time scale"<<","<<"LARVT for Re="+reynoldsnum<<endl;
for(int i = 0; i < ndt; ++i){
	// Update
    	brhs1 = vrhs1(0, Xh);
    	brhs2 = vrhs2(0, Xh);
	// Solve
	int res = LinearCG(JUzawa, p[], precon=Precon, nbiter=100, verbosity=10, veps=eps);
	assert(res==1);
	eps = -abs(eps);
	// Local advective rate of velocity transport
	uvw1 = dx(u1);
	uvw2 = dy(u1);
	uvw3 = dx(u2);
	uvw4 = dy(u2);
	uvw8 = u1*uvw1+u2*uvw2;
	uvw9 = u1*uvw3+u2*uvw4;
	uvw5 = dy(uvw8);
	uvw6 = dx(uvw9);
	uvw7 = dx(u2)-dy(u1);
	larvt = (uvw5-uvw6)/uvw7;
	cout << "Local advective rate of vorticity transport at t = "<< t << " -> " <<larvt(0.9,0.5)<<" :";
	file <<i<< "," <<larvt(0.9,0.5)<< endl;
	// Update
	dt = min(dt, T-t);
	t += dt;
	if(dt < 1e-10*T) break;
	}
// Display
cout << "Time step -> "<< dt << endl;
cout << "u1 max = " << u1[].linfty
<< ", u2 max = " << u2[].linfty
<< ", p max = " << p[].max << endl;